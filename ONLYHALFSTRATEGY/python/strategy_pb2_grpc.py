# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import strategy_pb2 as strategy__pb2


class StrategyStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.getInformationStream = channel.unary_stream(
        '/cryptoarsenal.Strategy/getInformationStream',
        request_serializer=strategy__pb2.Empty.SerializeToString,
        response_deserializer=strategy__pb2.Information.FromString,
        )
    self.getOnOrderStateChangeStream = channel.unary_stream(
        '/cryptoarsenal.Strategy/getOnOrderStateChangeStream',
        request_serializer=strategy__pb2.Empty.SerializeToString,
        response_deserializer=strategy__pb2.OrderEntry.FromString,
        )
    self.updateConfig = channel.unary_stream(
        '/cryptoarsenal.Strategy/updateConfig',
        request_serializer=strategy__pb2.StrategyConfig.SerializeToString,
        response_deserializer=strategy__pb2.StrategyConfig.FromString,
        )
    self.logging = channel.unary_unary(
        '/cryptoarsenal.Strategy/logging',
        request_serializer=strategy__pb2.LogEntry.SerializeToString,
        response_deserializer=strategy__pb2.Empty.FromString,
        )
    self.cancelOrder = channel.unary_unary(
        '/cryptoarsenal.Strategy/cancelOrder',
        request_serializer=strategy__pb2.CancelOrder.SerializeToString,
        response_deserializer=strategy__pb2.Empty.FromString,
        )
    self.makeOrders = channel.unary_unary(
        '/cryptoarsenal.Strategy/makeOrders',
        request_serializer=strategy__pb2.Orders.SerializeToString,
        response_deserializer=strategy__pb2.Empty.FromString,
        )
    self.getTaskData = channel.unary_unary(
        '/cryptoarsenal.Strategy/getTaskData',
        request_serializer=strategy__pb2.Empty.SerializeToString,
        response_deserializer=strategy__pb2.TaskData.FromString,
        )
    self.getUserVar = channel.unary_unary(
        '/cryptoarsenal.Strategy/getUserVar',
        request_serializer=strategy__pb2.UserVar.SerializeToString,
        response_deserializer=strategy__pb2.UserVar.FromString,
        )
    self.setUserVar = channel.unary_unary(
        '/cryptoarsenal.Strategy/setUserVar',
        request_serializer=strategy__pb2.UserVar.SerializeToString,
        response_deserializer=strategy__pb2.Empty.FromString,
        )
    self.shutdown = channel.unary_unary(
        '/cryptoarsenal.Strategy/shutdown',
        request_serializer=strategy__pb2.Empty.SerializeToString,
        response_deserializer=strategy__pb2.Empty.FromString,
        )


class StrategyServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def getInformationStream(self, request, context):
    """broker as server, strategy as client
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getOnOrderStateChangeStream(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def updateConfig(self, request, context):
    """strategy client update subscribeBooks/period to broker, and broker stream back config if override needed(single pair)
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def logging(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def cancelOrder(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def makeOrders(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getTaskData(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def getUserVar(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def setUserVar(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def shutdown(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_StrategyServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'getInformationStream': grpc.unary_stream_rpc_method_handler(
          servicer.getInformationStream,
          request_deserializer=strategy__pb2.Empty.FromString,
          response_serializer=strategy__pb2.Information.SerializeToString,
      ),
      'getOnOrderStateChangeStream': grpc.unary_stream_rpc_method_handler(
          servicer.getOnOrderStateChangeStream,
          request_deserializer=strategy__pb2.Empty.FromString,
          response_serializer=strategy__pb2.OrderEntry.SerializeToString,
      ),
      'updateConfig': grpc.unary_stream_rpc_method_handler(
          servicer.updateConfig,
          request_deserializer=strategy__pb2.StrategyConfig.FromString,
          response_serializer=strategy__pb2.StrategyConfig.SerializeToString,
      ),
      'logging': grpc.unary_unary_rpc_method_handler(
          servicer.logging,
          request_deserializer=strategy__pb2.LogEntry.FromString,
          response_serializer=strategy__pb2.Empty.SerializeToString,
      ),
      'cancelOrder': grpc.unary_unary_rpc_method_handler(
          servicer.cancelOrder,
          request_deserializer=strategy__pb2.CancelOrder.FromString,
          response_serializer=strategy__pb2.Empty.SerializeToString,
      ),
      'makeOrders': grpc.unary_unary_rpc_method_handler(
          servicer.makeOrders,
          request_deserializer=strategy__pb2.Orders.FromString,
          response_serializer=strategy__pb2.Empty.SerializeToString,
      ),
      'getTaskData': grpc.unary_unary_rpc_method_handler(
          servicer.getTaskData,
          request_deserializer=strategy__pb2.Empty.FromString,
          response_serializer=strategy__pb2.TaskData.SerializeToString,
      ),
      'getUserVar': grpc.unary_unary_rpc_method_handler(
          servicer.getUserVar,
          request_deserializer=strategy__pb2.UserVar.FromString,
          response_serializer=strategy__pb2.UserVar.SerializeToString,
      ),
      'setUserVar': grpc.unary_unary_rpc_method_handler(
          servicer.setUserVar,
          request_deserializer=strategy__pb2.UserVar.FromString,
          response_serializer=strategy__pb2.Empty.SerializeToString,
      ),
      'shutdown': grpc.unary_unary_rpc_method_handler(
          servicer.shutdown,
          request_deserializer=strategy__pb2.Empty.FromString,
          response_serializer=strategy__pb2.Empty.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'cryptoarsenal.Strategy', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
